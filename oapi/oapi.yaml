openapi: "3.0.0"
info:
  version: 1.0.0
  title: Swagger Petstore
  description: A sample API that uses a petstore as an example to demonstrate features in the OpenAPI 3.0 specification
servers:
  - url: http://localhost:8080/v1

paths:
  /auth/email:
    post:
      operationId: AuthEmail
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - email
                - password
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '401':
          description: Unauthorized

  /pays:
    post:
      security:
        - BearerAuth: [ ]
      operationId: AddPay
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pay'

      responses:
        '200':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '401':
          description: Unauthorized

    get:
      security:
        - BearerAuth: [ ]
      operationId: GetPays
      parameters:
        - name: dateFrom
          in: query
          required: true
          schema:
            type: string
            format: date
        - name: dateTo
          in: query
          required: true
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Pays response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pay'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    PayType:
      type: string
      x-nullable: false
      description: >
        Тип оплаты:
        * accrual - начисление
        * redemption - списание
      enum:
        - accrual
        - redemption

    RepeatType:
      type: string
      description: >
        Тип повторения:
        * daily - Каждый день
        * weekly - Каждую неделю
        * monthly - Каждый месяц
      enum:
        - daily
        - weekly
        - monthly

    # Request params

    # Responses
    Token:
      type: object
      required:
        - token
      properties:
        token:
          type: string

    Pay:
      type: object
      required:
        - id
        - title
        - amount
        - type
        - date
      properties:
        id:
          type: string
        title:
          type: string
        amount:
          type: string
        type:
          $ref: '#/components/schemas/PayType'
        repeatType:
          $ref: '#/components/schemas/RepeatType'
        date:
          $ref: '#/components/schemas/DateTimeWithTimeZone'
        createdAt:
          $ref: '#/components/schemas/DateTimeWithTimeZone'
        updatedAt:
          $ref: '#/components/schemas/DateTimeWithTimeZone'

#    Pay:
#      allOf:
#        - $ref: '#/components/schemas/NewPay'
#        - type: object
#          required:
#            - id
#          properties:
#            id:
#              type: integer
#              format: int64

    NewPay:
      type: object
      required:
        - name
      properties:
        title:
          type: string

    ### COMMON ###
    DateTimeWithTimeZone:
      type: string
      format: date-time
      x-nullable: false
      example: '2018-04-24T13:37:36+03:00'

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT